인터페이스는 하나의 객체가 아니라 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라서 실행 내용과 리턴값이 다를 수 있다.
따라서 개발 코드 측면에서는 코드 변경 없이 실행 내용과 리턴값을 다양화할 수 있다는 장점을 가지게 된다.

인터페이스는 상수와 메소드만을 구성 멤버로 가진다. 인터페이스는 객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.

인터페이스
1. 상수 필드
- public static final로 선언 생략 가능(자동으로 컴파일 과정에서 붙임)
- 상수명은 대문자로 작성, 서로 다른 단어로 구성되어 있을 경우 언더바(_)로 연결
인터페이스 상수는 static{} 블록으로 초기화 할 수 없어 반드시 선언과 동시에 초기값을 지정해야한다

2. 추상 메소드
- 어떤 매개값이 필요하고, 리턴 타입이 무엇인지만 알려준다
- 인터페이스에 선언된 추상 메소드는 모두 public abstract의 특성을 갖기 때문에 생략가능

3. 디폴트 메소드
- 디폴트 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게됨
- default 리턴타입 메소드명(매개변수){}


4. 정적 메소드
- 정적 메소드는 public 특성을 갖기 때문에 public을 생략하더라도 자동적으로 컴파일 과정에서 붙게 된다

구현 클래스에서 인터페이스의 추상 메소드들에 대한 실체 메소드를 작성할 때 주의할 점은 인터페이스의 모든 메소드는 기본적으로 public 접근 제한을 갖기 때문에 public보다 더 낮은 접근 제한으로 작성할 수 없다.

인터페이스로 구현 객체를 사용하려면 인터페이스 변수를 선언하고 구현 객체를 대입해야 한다.
인터페이스 변수는 참조 타입이기 때문에 구현 객체가 대입될 경우 구현 객체의 번지를 저장한다.
ex) 인터페이스 변수 = 구현객체;
RemoteControl rc;
rc = new Television();
rc = new Audio();

익명 구현 객체
ex) 인터페이스 변수 = new 인터페이스(){
	//인터페이스에 선언된 추상 메소드의 실체 메소드 선언
};

인터페이스 타입에 어떤 구현 객체를 대입하느냐에 따라 실행 결과가 달라진다.
상속은 같은 종류의 하위 클래스를 만드는 기술이고, 인터페이스는 사용 방법이 동일한 클래스를 만드는 기술이다

프로그램을 개발할 때 인터페이스를 사용해서 메소드를 호출하도록 코딩을 했다면, 구현 객체를 교체하는 것은 매우 손쉽고 빠르게 할 수 있다. 프로그램 소스 코드는 변함이 없는데, 구현 객체를 교체함으로써 프로그램의 실행 결과가 다양해진다. 이것이 인터페이스의 다형성이다

인터페이스 구현 클래스를 상속해서 자식 클래스를 만들었다면 자식 객체 역시 인터페이스 타입으로 자동 타입변환시킬 수 있다

매개 변수의 타입이 인터페이스일 경우, 어떠한 구현 객체도 매개값으로 사용 할 수 있고, 어떤 구현 객체가 제공되느냐에 따라 메소드의 실행 결과는 다양해질 수 있다. (매개 변수의 다형성)

강제타입변환(상속과 같은 개념,instanceof 사용)

인터페이스는 다중상속 허용, 다중 상속 할 경우 해당 상위에 있는 모든 추상 메소드에 대한 실체 메소드를 가져야한다

인터페이스에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 긴으을 추가하기 위해서이다















