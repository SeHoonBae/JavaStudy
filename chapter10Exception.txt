예외에는 일반예외와 실행 예외가 있는데 일반예외는 Exception을 상속받지만 RuntimeException은 상속받지 않음
실행 예외(컴파일러가 체크X)인지 보기 위해서는 RuntimeException을 상속받았는지 보면됨

NullPointerException - null 값을 갖는 참조 변수로 객체 접근
ArrayIndexOutOfBoundsException - 배열에서 인덱스 범위를 초과하여 사용한 경우
NumberFormatException - 문자열을 숫자로 변환할때 문자열에서 숫자로 변환될수 없는 문자가 포함되었을 때
ClassCastException - 클래스는 다른 클래스로 타입 변환할 수 없다.
ex) Animal animal = new Dog();	Cat cat = (Cat) animal; -> ClassCastException 발생

다중 catch
try 블록 내부에서 다양한 종류의 예외가 발생할 수 있어 다중 catch 블록을 작성
ex)
try{
}catch(ArrayIndexOutOfBoundsException e){
예외처리1 }catch(NumberFormatException e){
예외처리 2 }

catch블록이 여러개라도 하나의 catch 블록만 실행된다
try 블록에서 동시다발적으로 예외가 발생하지 않고, 하나의 예외가 발생하면 즉시 실행을 멈추고 해당 catch블록으로
이동하기 때문

상위 예외 클래스의 catch 블록이 위에 있다면, 하위 예외 클래스의 catch 블록은 실행되지 않는다
하위 예외는 상위 예외를 상속했기 때문에 상위 예외 타입도 되기 때문이다.(ex : 상위 :Exception 하위 : ArrayIndexOufOfBoundsException)
ex)
try{ ArrayIndexOufOfBoundsException 발생 , NumberFormatException 발생 }
catch(Exception e){} catch(ArrayIndexOufOfBoundsException e){}

이때 첫번째 catch 블록만 선택되어 실행되므로 다음과 같이 수정해야 함

try{ ArrayIndexOutOfBoundsException 발생, NumberFormatException 발생}
catch(ArrayIndexOufOfBoundsException e){} catch(Exception e){}

멀티 catch
catch 괄호() 안에 동일하게 처리하고 싶은 예외를 |로 연결하면 된다
ex)
try{ ArrayIndexOutOfBoundsException 또는 NumberFormatException 발생, 다른 Exception 발생}
catch(ArrayIndexOutOfBoundsException | NumberFormatException e) {예외처리 1}
cathc(Exception e ) { 예외처리 2}

try-with-resources 는 try(사용할 리소스){} try의 ()안의 리소스들은 작업이 완료되거나 예외가 발생할 경우
자동으로 close()메소드를 호출하여 리소스를 닫아준다
ex)
try(
FileInputStream fis = new FileInputStream("file1.txt");
FileInputStream fos = new FileInputStream("file2.txt");
){ ...}
catch(IOException e){...}

※ try-with-resources의 리소스 객체는 java.lang.AutoCloseable 인터페이스를 구현하고 있어야 한다
API 도큐먼트에서 AutoCloseable 인터페이스를 찾아 "All Known Implementing Classes:"를 보면 
try-with-resources와 함께 사용할 수 있는 리소스가 어떤것이 있는지 알 수 있다.

※ 자바 API 도큐먼트를 보면 클래스 생성자와 메소드 선언부에 throws 키워드가 붙어있는 것을 볼 수 있다.
이러한 생성자와 메소드를 사용하고 싶다면, 반드시 try-catch 블록으로 예외 처리를 해야 한다.
예를 들어
forName
public static Class<?> forName(String className) throws ClassNotFoundException -> API도큐먼트에 표시
forName() 메소드 선언부 뒤에 throws ClassNotFoundException이 붙어 있기 때문에 forName() 메소드를 호출
할 때 try-catch 블록으로 예외를 처리하거나, throws로 예외를 떠넘겨야 한다.
ex)
public class THrowsExample{
	public static void main(String[] args){
		try{
			findClass();
		} catch(ClassNotFoundException e){
		  System.out.println("클래스가 존재하지 않습니다.");
		  }
		}
	public static void findClass() throws ClassNotFoundException{
		Class clazz = Class.forName("java.lang.String2");
	}
}

main() 메소드에서 throws Exception을 붙이는 것은 좋지 못한 예외 처리 방법이며 프로그램 사용자는
프로그램이 알수 없는 예외 내용을 출력하고 종료되는 것을 좋아하지 않아 main()에서 try-catch블록으로
예외를 최종 처리하는 것이 바람직하다.

프로그램을 개발하다 보면 자바 표준 API에서 제공하는 예외 클래스만으로는 다양한 종류의 예외를 표현할 수가
없어 사용자 정의 예외 클래스를 만든다
사용자 정의 예외 클래스는 일반 예외나 실행예외로 선언할 수 있으며 일반예외는 Exception 실행 예외는
RuntimeException을 상속하면 된다.
ex)
public class XXXException extends [Exception|RuntimeException]{
	public XXXException(){}
	public XXXException(String message) {super(message);}
}
사용자 정의 예외 클래스 이름은 Exception으로 끝나는 것이 좋다
대부분 생성자 선언만을 포함하며 생성자는 매개변수가 없는 생성자와 예외발생 원인을 전다하기 위해
String 타입의 매개변수를 갖는 생성자 두개를 선언하는 것이 일반적이다.
예외 메시지의 용도는 catch{}블록의 예외 처리 코드에서 이용하기 위해서이다.

public class BalanceInsufficientException extends Exception{
	public BalanceInsufficientException(){}
	public BalanceInsufficientException(String message){
		super(message);
	}
}

public calss Account{
	private long balance;
	public Account(){}
	public long getBalance(){ return balance;}
	public void deposit(int money){ balance += money;}
	public void withdraw(int money) throws BalanceInsufficientException //사용자 정의 예외 떠넘기기 {
		if(balance < money){
			throw new BalanceInsufficientException("잔고부족:"+(money-balance)+"모자람"); 
			// 사용자 정의 예외 발생
		} balance -= money; 
	}
}

public class AccountExample{
	public static void main(String[] args){
		Account account = new Account();
		account,deposit(10000);
		System.out.println("예금액: " + account.getBalance());
		try{ account.withdraw(30000); 
		} catch(BalanceInsufficientException e){
		  String message = e.getMessage(); //예외 메시지 내용에는 왜 예외가 발생했는지에 대한 간단한 설명이 포함됨
		  System.out.println(message);
		  System.out.println();
		  e.printStackTrace(); // 예외 발생 코드를추적해서 모두 콘솔에 출력
		  }
		}
}	

